package at.docstoegprer.android;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

import android.app.Activity;
import android.graphics.PixelFormat;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;

public class CamView extends Activity implements SurfaceHolder.Callback {

	private Camera camera;
	private boolean isPreviewRunning = false;
	private ImageView accessories;
	private ImageView tops;
	private ImageView bottoms;
	private ImageView shoes;
	private OnClickListener takePhoto;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		// setup window features
		Window win = getWindow();
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		win.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);
		win.setFormat(PixelFormat.TRANSLUCENT);
		setContentView(R.layout.camera);

		// initialize onclicklistener to take photos
		takePhoto = new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				takePhoto(v);
			}
		};

		// initialize overlays
		initOverlays();
		
		// prepare camera
		SurfaceView camView = (SurfaceView) findViewById(R.id.cam);
		if (camView != null) {
			SurfaceHolder holder = camView.getHolder();
			holder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
			holder.addCallback(this);
		}

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
	    MenuInflater inflater = getMenuInflater();
	    inflater.inflate(R.menu.cammenu, menu);
	    return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	    // hide all items first
		accessories.setVisibility(View.INVISIBLE);
		tops.setVisibility(View.INVISIBLE);
		bottoms.setVisibility(View.INVISIBLE);
		shoes.setVisibility(View.INVISIBLE);
		
		// Handle item selection
		switch (item.getItemId()) {
		case R.id.menu_accessories:
			accessories.setVisibility(View.VISIBLE);
			break;
		case R.id.menu_tops:
			tops.setVisibility(View.VISIBLE);
			break;
		case R.id.menu_bottoms:
			bottoms.setVisibility(View.VISIBLE);
			break;
		case R.id.menu_shoes:
			shoes.setVisibility(View.VISIBLE);
			break;
		default:
			return super.onOptionsItemSelected(item);
		}
		
		return true;
	}
	
	/**
	 * take a picture using the cam
	 */
	private void takePhoto(View v) {
		String picOutDir;
		if (accessories.equals(v)) {
			picOutDir = OutDir.ACCESSORIES;
		} else if (tops.equals(v)) {
			picOutDir = OutDir.TOPS;
		} else if (bottoms.equals(v)) {
			picOutDir = OutDir.BOTTOMS;
		} else {
			// if everything else failed we consider it to be shoes :)
			picOutDir = OutDir.SHOES;
		}
		
		Date date = new Date();
		File path = new File(Environment.getExternalStorageDirectory(), picOutDir);
		if (!path.exists()) {
			path.mkdirs();
		}
		try {
			final FileOutputStream file = new FileOutputStream(new File(path, date.getTime() + ".jpg"));
			
			camera.takePicture(null, null, new PictureCallback() {
				
				@Override
				public void onPictureTaken(byte[] data, Camera camera) {
					try {
						file.write(data);
						file.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				}
			});
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	/**
	 * initializes references for overlays
	 * bind onClickListener
	 */
	private void initOverlays() {
		accessories = (ImageView) findViewById(R.id.accessories);
		accessories.setVisibility(View.VISIBLE);
		accessories.setOnClickListener(takePhoto);
		
		tops = (ImageView) findViewById(R.id.tops);
		tops.setOnClickListener(takePhoto);
		
		bottoms = (ImageView) findViewById(R.id.bottoms);
		bottoms.setOnClickListener(takePhoto);
		
		shoes = (ImageView) findViewById(R.id.shoes);
		shoes.setOnClickListener(takePhoto);
	}
	
	/**
	 * will initialize the camera when the surface is initialized
	 */
	public void surfaceCreated(SurfaceHolder holder) {
		try {
			camera = Camera.open();
		} catch (Exception e) {
			Log.e("CamView", e.getMessage());
		}
	}

	public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
		if (camera == null) {
			return;
		}

		// calling stopPreview will crash if preview is not running
		if (isPreviewRunning) {
			camera.stopPreview();
		}

		// set cam parameters
		Camera.Parameters camParams = camera.getParameters();
		camParams.setPictureSize(240, 160);
		camera.setParameters(camParams);
		
		camera.setDisplayOrientation(0);
		android.hardware.Camera.CameraInfo info =
	             new android.hardware.Camera.CameraInfo();
	     android.hardware.Camera.getCameraInfo(cameraId, info);
	     int rotation = this.getWindowManager().getDefaultDisplay()
	             .getRotation();
	     int degrees = 0;
	     switch (rotation) {
	         case Surface.ROTATION_0: degrees = 0; break;
	         case Surface.ROTATION_90: degrees = 90; break;
	         case Surface.ROTATION_180: degrees = 180; break;
	         case Surface.ROTATION_270: degrees = 270; break;
	     }

	     int result;
	     if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
	         result = (info.orientation + degrees) % 360;
	         result = (360 - result) % 360;  // compensate the mirror
	     } else {  // back-facing
	         result = (info.orientation - degrees + 360) % 360;
	     }
	     camera.setDisplayOrientation(result);
		
		try {
			camera.setPreviewDisplay(holder);
		} catch (IOException e) {
			e.printStackTrace();
		}

		camera.startPreview();

		isPreviewRunning = true;
	}

	/**
	 * release camera when the surface is destroyed
	 */
	public void surfaceDestroyed(SurfaceHolder holder) {
		if (camera != null) {
			camera.stopPreview();
			camera.release();
			camera = null;
		}

		isPreviewRunning = false;
	}
}
